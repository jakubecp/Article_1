X11()
plot (maxent_all_predict,
main="Nicrophorus sepultor distribution (Maxent/all)", axes=F)
plot (wrld_simpl, add=TRUE, axes=FALSE)
#reclasification (based on maximum training sensitivityplus specificity logistic treshold)
m = c(0.4263,1,1,0,0.4262,0)
rclmat = matrix (m,ncol=3,byrow=TRUE)
endangered_reclas<- reclassify (maxent_all_predict, rclmat)
# X11()
# plot (endangered_reclas)
#plot (wrld_simpl, add=TRUE, axes=FALSE) #not a best resolution
#map("world", interior = TRUE, xlim=c(0,80), ylim=c(20,70), add=TRUE)#this is better resolution
#map("world", boundary = FALSE, col="gray", add = TRUE) #this could make an interior
#of europe be with gray boarders
#experiments with maps - This is IT!!!
newmap = getMap(resolution="low")
X11()
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
##EXport to TIFF
setwd ("C:/Users/jakubecp/Dropbox/SGEM_2015/Article_1")# skola
tiff (filename="sepultor.tiff", width=5000, height=5000,
compression="lzw", res= 800)
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
dev.off()
maxent_all <- maxent (variable_crop, coord, args=c("maximumbackground=1000",
"betamultiplier=1",
"defaultprevalence=0.5"))
#with "betamultiplier" for smoother model of climatic variables (values= 1 - inf)
X11()
response (maxent_all)
# response (maxent_all2)
# response (maxent_all5)
#all values
maxent_all@results
#just AUC
maxent_all@results[5]
# maxent_all2@results[5]
# maxent_all5@results[5]
#Predict probability of occurence
maxent_all_predict<- predict (maxent_all, variable_crop)
#Plot the prediction
X11()
plot (maxent_all_predict,
main="Nicrophorus sepultor distribution (Maxent/all)", axes=F)
plot (wrld_simpl, add=TRUE, axes=FALSE)
#reclasification (based on maximum training sensitivityplus specificity logistic treshold)
m = c(0.4263,1,1,0,0.4262,0)
rclmat = matrix (m,ncol=3,byrow=TRUE)
endangered_reclas<- reclassify (maxent_all_predict, rclmat)
# X11()
# plot (endangered_reclas)
#plot (wrld_simpl, add=TRUE, axes=FALSE) #not a best resolution
#map("world", interior = TRUE, xlim=c(0,80), ylim=c(20,70), add=TRUE)#this is better resolution
#map("world", boundary = FALSE, col="gray", add = TRUE) #this could make an interior
#of europe be with gray boarders
#experiments with maps - This is IT!!!
newmap = getMap(resolution="low")
X11()
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
##EXport to TIFF
setwd ("C:/Users/jakubecp/Dropbox/SGEM_2015/Article_1")# skola
tiff (filename="sepultor.tiff", width=5000, height=5000,
compression="lzw", res= 800)
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
dev.off()
setwd ("C:/Users/pavel/Downloads/Dropbox/SGEM_2015/Article_1/") #doma
tiff (filename="sepultor.tiff", width=5000, height=5000,
compression="lzw", res= 800)
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
dev.off()
setwd ("C:/Users/jakubecp/Dropbox/SGEM_2015/Article_1")# skola
setwd ("C:/Users/pavel/Downloads/Dropbox/SGEM_2015/Article_1/") #doma
setwd ("/home/pavel/Dropbox/SGEM_2015/Article_1 ") #linux
cz.nic.raw = read.csv ("nicr.czech.csv", header= TRUE, sep=";")
head(cz.nic.raw)
## first solution for transformation of DMS into the decimal degrees
## with function convert
convert<-function(coord){
tmp1=strsplit(coord,"D")
tmp2=strsplit(tmp1[[1]][2],"M")
tmp3=strsplit(tmp2[[1]][2],"S")
dec=c(as.numeric(tmp1[[1]][1]),as.numeric(tmp2[[1]][1]),as.numeric(tmp3[[1]]))
c<-abs(dec[1])+dec[2]/60+dec[3]/3600
c<-ifelse(dec[1]<0,-c,c)
return(c)
}
n1=length(cz.nic.raw$lat)
n2=length(cz.nic.raw$long)
cz.lat= c()
cz.long=c()
for (i in 1:n1) {
cz.lat[i]=convert (as.character (cz.nic.raw[i,5]))
cz.long[i]=convert (as.character (cz.nic.raw[i,6]))
}
## second solution for transformation of DMS to decimal degrees
## with celestila packages and function dms2deg
n=length(cz.nic.raw$lat)
cz.lat = c()
cz.long = c()
for (i in 1:n) {
cz.lat[i]=dms2deg (as.character (cz.nic.raw[i,5]), sep="DMS")
cz.long[i]=dms2deg (as.character (cz.nic.raw[i,6]), sep="DMS")
}
#RAW data from GBIF (only records with coordinates and you should set up upper limit of them)
n.ger<- occ_search(scientificName = "Nicrophorus germanicus",
hasCoordinate= TRUE, limit = 500)
#coordinates of observations (filter out NAs and obvious mistakes!)
coord <- data.frame (long = n.ger$data$decimalLongitude ,
lat= n.ger$data$decimalLatitude)
## merge three datasets cz.lat, cz.long, antennatus (0,1),
## + decimalLongitude and decimalLatitude
# new line to coord data frame with presence/absence data
ger = c(1,1,1,1,1,1)
length (ger)
coord = data.frame (coord, ger)
## bind data from previous manipulation (dms to dd) with presence/absence data
coord.cz = data.frame (long = cz.long, lat = cz.lat, ger = cz.nic.raw$germanicus)
## bind both dataframes (GBIF + CZ) together
coord.full = rbind (coord, coord.cz)
## created two data frames with presence data and absence data.
coord = data.frame (long = coord.full$long [coord.full$ger == "1"],
lat = coord.full$lat [coord.full$ger == "1"])
coord.neg = data.frame (long = coord.full$long [coord.full$ger == "0"],
lat = coord.full$lat [coord.full$ger == "0"])
X11()
plot (coord)
plot (wrld_simpl, add=T)
#choose the right (important) climatic variables (http://www.worldclim.org/bioclim)
#for your species and stack them! USE ENFA (package adehabitat) for selection of the right variables
#if you do not know a lot about them
setwd ("F:/Spatial_modeling/ENM_2015_Varela/climatic_layers/worldclim ")#disk 2 skola
setwd ("C:/Users/pavel/Downloads/Vzdelavani/Spatial_modeling/ENM_2015_Varela/climatic_layers/worldclim/") #notas
setwd ("/home/pavel/Documents/ENM_2015_Varela/climatic_layers/worldclim") #linux
?enfa
variable<- stack (c("bio10.bil", "bio8.bil", "bio16.bil", "bio1.bil")) #(c("bio10.bil", "bio8.bil", "bio2.bil", "bio1.bil"))
#optional-if you are interested in more local (and quicker) predictions
#make an object (e) of certain extant (xmin, xmax, ymin, ymax) for croping
e<-extent (-10,38,35,65)
#crop your climatic maps
variable_crop<- crop (variable, e)
#Project niches of target species by extracting values from raster and ploting them
niche <- extract (variable_crop, coord)
niche <- as.data.frame (niche)
X11()
par (mfrow=c(1,2))
plot (niche$bio1, niche$bio10, xlab= "prectip of warmest qrt"
, ylab= "temp warmest qurt" )
plot (niche$bio16, niche$bio8 , xlab= "precip of wettest qrt" ,
ylab= "temp of wettest qrt" )
# MAXENT model (basic setup) - creates values of the model,
# which are used in checking the behavior of the model
# and making predictions (fallowing steps)
maxent_all <- maxent (variable_crop, coord, args=c("maximumbackground=1000",
"betamultiplier=1",
"defaultprevalence=0.5"))
# maxent_all2 <- maxent (variable_crop, coord, args=c("maximumbackground=1000",
#                                                     "betamultiplier=2",
#                                                     "defaultprevalence=0.5"))
# maxent_all5 <- maxent (variable_crop, coord, args=c("maximumbackground=1000",
#                                                     "betamultiplier=5",
#                                                     "defaultprevalence=0.5"))
#check the behavior of your data to variables (graph) and play
#with "betamultiplier" for smoother model of climatic variables (values= 1 - inf)
X11()
response (maxent_all)
# response (maxent_all2)
# response (maxent_all5)
#all values
maxent_all@results
#just AUC
maxent_all@results[5]
# maxent_all2@results[5]
# maxent_all5@results[5]
#Predict probability of occurence
maxent_all_predict<- predict (maxent_all, variable_crop)
#Plot the prediction
X11()
plot (maxent_all_predict,
main="Nicrophorus germanicus distribution (Maxent/all)", axes=F, legend=F)
plot (wrld_simpl, add=TRUE, axes=FALSE)
#reclasification reclasification (based on maximum training sensitivityplus specificity logistic treshold)
m = c(0.4666,1,1,0,0.4665,0)
rclmat = matrix (m,ncol=3,byrow=TRUE)
endangered_reclas<- reclassify (maxent_all_predict, rclmat)
X11()
plot (endangered_reclas)
#plot (wrld_simpl, add=TRUE, axes=FALSE) #not a best resolution
#map("world", interior = TRUE, xlim=c(0,80), ylim=c(20,70), add=TRUE)#this is better resolution
#map("world", boundary = FALSE, col="gray", add = TRUE) #this could make an interior
#of europe be with gray boarders
#experiments with maps - This is IT!!!
newmap = getMap(resolution="low")
X11()
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
##EXport to TIFF
setwd ("C:/Users/pavel/Downloads/Dropbox/SGEM_2015/Article_1/") #doma
tiff (filename="germanicus.tiff", width=5000, height=5000,
compression="lzw", res= 800)
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
dev.off()
rm(list = ls())
data(wrld_simpl) #create the World map with borders
##trasfering data from our observations in czech republic
# setwd ("C:/Users/jakubecp/Dropbox/SGEM_2015/Article_1")# skola
setwd ("C:/Users/pavel/Downloads/Dropbox/SGEM_2015/Article_1/") #doma
# setwd ("/home/pavel/Dropbox/SGEM_2015/Article_1 ") #linux
cz.nic.raw = read.csv ("nicr.czech.csv", header= TRUE, sep=";")
head(cz.nic.raw)
## first solution for transformation of DMS into the decimal degrees
## with function convert
# convert<-function(coord){
#   tmp1=strsplit(coord,"D")
#   tmp2=strsplit(tmp1[[1]][2],"M")
#   tmp3=strsplit(tmp2[[1]][2],"S")
#   dec=c(as.numeric(tmp1[[1]][1]),as.numeric(tmp2[[1]][1]),as.numeric(tmp3[[1]]))
#   c<-abs(dec[1])+dec[2]/60+dec[3]/3600
#   c<-ifelse(dec[1]<0,-c,c)
#   return(c)
# }
# n1=length(cz.nic.raw$lat)
# n2=length(cz.nic.raw$long)
# cz.lat= c()
# cz.long=c()
# for (i in 1:n1) {
#   cz.lat[i]=convert (as.character (cz.nic.raw[i,5]))
#   cz.long[i]=convert (as.character (cz.nic.raw[i,6]))
#
# }
## second solution for transformation of DMS to decimal degrees
## with celestila packages and function dms2deg
n=length(cz.nic.raw$lat)
cz.lat = c()
cz.long = c()
for (i in 1:n) {
cz.lat[i]=dms2deg (as.character (cz.nic.raw[i,5]), sep="DMS")
cz.long[i]=dms2deg (as.character (cz.nic.raw[i,6]), sep="DMS")
}
#RAW data from GBIF (only records with coordinates and you should set up upper limit of them)
n.ant<- occ_search(scientificName = "Nicrophorus antennatus",
hasCoordinate= TRUE, limit = 500)
#coordinates of observations (filter out NAs and obvious mistakes!)
coord <- data.frame (long = n.ant$data$decimalLongitude ,
lat= n.ant$data$decimalLatitude)
## merge three datasets cz.lat, cz.long, antennatus (0,1),
## + decimalLongitude and decimalLatitude
# new line to coord data frame with presence/absence data
antenn = c(1,1,1,1,1,1,1,1,1,1)
length(antenn)
coord = data.frame (coord, antenn)
## bind data from previous manipulation (dms to dd) with presence/absence data
coord.cz = data.frame (long = cz.long, lat = cz.lat, antenn = cz.nic.raw$antennatus)
## bind both dataframes (GBIF + CZ) together
coord.full = rbind (coord, coord.cz)
## created two data frames with presence data and absence data.
coord = data.frame (long = coord.full$long [coord.full$antenn == "1"],
lat = coord.full$lat [coord.full$antenn == "1"])
coord.neg = data.frame (long = coord.full$long [coord.full$antenn == "0"],
lat = coord.full$lat [coord.full$antenn == "0"])
X11()
plot (coord, xlim=c(-10,35), ylim=c(35,65))
plot (wrld_simpl, add=T)
#choose the right (important) climatic variables (http://www.worldclim.org/bioclim)
#for your species and stack them! USE ENFA (package adehabitat) for selection of the right variables
#if you do not know a lot about them
# setwd ("F:/Spatial_modeling/ENM_2015_Varela/climatic_layers/worldclim ")#disk 2 skola
setwd ("C:/Users/pavel/Downloads/Vzdelavani/Spatial_modeling/ENM_2015_Varela/climatic_layers/worldclim/") #notas
# setwd ("/home/pavel/Documents/ENM_2015_Varela/climatic_layers/worldclim") #linux
# ?enfa
variable<- stack (c("bio10.bil", "bio8.bil", "bio16.bil", "bio1.bil")) #(c("bio10.bil", "bio8.bil", "bio2.bil", "bio1.bil"))
#optional-if you are interested in more local (and quicker) predictions
#make an object (e) of certain extant (xmin, xmax, ymin, ymax) for croping
e<-extent (-10,38,35,65)
#crop your climatic maps
variable_crop<- crop (variable, e)
#Project niches of target species by extracting values from raster and ploting them
niche <- extract (variable_crop, coord)
niche <- as.data.frame (niche)
X11()
par (mfrow=c(1,2))
plot (niche$bio1, niche$bio10, xlab= "annual mean temperature"
, ylab= "temp warmest qurt" )
plot (niche$bio16, niche$bio8 , xlab= "prec of wettest qurt" ,
ylab= "temp of wettest qrt" )
# MAXENT model (basic setup) - creates values of the model,
# which are used in checking the behavior of the model
# and making predictions (fallowing steps)
maxent_all <- maxent (variable_crop, coord, args=c("maximumbackground=1000",
"betamultiplier=1",
"defaultprevalence=0.5"))
# maxent_all2 <- maxent (variable_crop, coord, args=c("maximumbackground=1000",
#                                                     "betamultiplier=2",
#                                                     "defaultprevalence=0.5"))
# maxent_all5 <- maxent (variable_crop, coord, args=c("maximumbackground=1000",
#                                                     "betamultiplier=5",
#                                                     "defaultprevalence=0.5"))
#check the behavior of your data to variables (graph) and play
#with "betamultiplier" for smoother model of climatic variables (values= 1 - inf)
X11()
response (maxent_all)
# response (maxent_all2)
# response (maxent_all5)
#all values
maxent_all@results
#just AUC
maxent_all@results[5]
# maxent_all2@results[5]
# maxent_all5@results[5]
#Predict probability of occurence
maxent_all_predict<- predict (maxent_all, variable_crop)
#Plot of the prediction
X11()
plot (maxent_all_predict,
main="Nicrophorus antennatus distribution (Maxent/all)", xlim =c(-120,40),ylim=c(30,70) )
plot (wrld_simpl, add=TRUE, xlim=c(-120,40),ylim=c(30,70))
#reclasification reclasification (based on maximum training sensitivityplus specificity logistic treshold)
m = c(0.4267,1,1,0,0.4266,0)
rclmat = matrix (m,ncol=3,byrow=TRUE)
endangered_reclas<- reclassify (maxent_all_predict, rclmat)
# X11()
# plot (endangered_reclas)
#plot (wrld_simpl, add=TRUE, axes=FALSE) #not a best resolution
#map("world", interior = TRUE, xlim=c(0,80), ylim=c(20,70), add=TRUE)#this is better resolution
#map("world", boundary = FALSE, col="gray", add = TRUE) #this could make an interior
#of europe be with gray boarders
#experiments with maps - This is IT!!!
newmap = getMap(resolution="low")
X11()
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
##EXport to TIFF
setwd ("C:/Users/pavel/Downloads/Dropbox/SGEM_2015/Article_1/") #doma
tiff (filename="anntenatus.tiff", width=5000, height=5000,
compression="lzw", res= 800)
plot (endangered_reclas, legend=F, xlim=c(-10,35), ylim=c(35,65))
plot (newmap, xlim=c(5,45), ylim=c(42,56), add=T)
dev.off()
jr_data <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
rm(list = ls())
jr_data <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
rm(list = ls())
jrdata <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
jrdata
summary(jrdata)
str(jrdata)
jrdata$POCET_M
rm(list = ls())
jrdata <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
jrdata
str(jrdata)
jrdata$POCET_M
rm(list = ls())
jrdata <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
jrdata
str(jrdata)
jrdata$POCET_M
hist(jrdata$POCET_TOT,jrdata$MES_POC )
data <- data.frame(jrdata$POCET_TOT, jrdata$MES_POC)
data <- data.frame(jrdata$POCET_TOT, jrdata$MES_POC)
fdata <- complete.cases(data)
rm(list = ls())
jrdata <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
jrdata
str(jrdata)
pocet <- jrdata$POCET_TOT
data <- data.frame(jrdata$POCET_TOT, jrdata$MES_POC)
fdata <- complete.cases(data)
hist(fdata$POCET_TOT,fdata$MES_POC )
hist(POCET_TOT,MES_POC)
fdata
str(fdata)
data <- data.frame(jrdata$POCET_TOT, jrdata$MES_POC)
str(data)
fdata <- filter (complete.cases(data))
filter
rm(list = ls())
jrdata <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
jrdata
str(jrdata)
pocet <- jrdata$POCET_TOT
fdata <- data.frame(jrdata$POCET_TOT, jrdata$MES_POC)
library(dplyr) # 0.4
fdata %>% filter(complete.cases(.))
str(data)
hist(POCET_TOT,MES_POC)
hist(fdata$POCET_TOT,fdata$MES_POC)
str(jrdata)
str(fdata)
hist(fdata$POCET_TOT,fdata$MES_POC)
hist(fdata$MES_POC,fdata$POCET_TOT)
plot(fdata$MES_POC,fdata$POCET_TOT)
plot(fdata$POCET_TOT, fdata$MES_POC)
str(fdata)
summary(fdata)
fdata %>% filter(complete.cases())
fdata %>% filter(complete.cases(.))
fdata %>% filter(complete.cases(.))
str(fdata)
summary(fdata)
hist(fdata$POCET_TOT)
fdata$jrdata.POCET_TOT <- as.numeric(fdata$jrdata.POCET_TOT)
summary(fdata)
hist(fdata$POCET_TOT)
is.numeric(fdata$jrdata.POCET_TOT)
fdata$POCET_TOT <- is.numeric(fdata$POCET_TOT)
is.numeric(fdata$POCET_TOT)
fdata$POCET_TOT <- as.numeric(fdata$POCET_TOT)
hist(fdata$POCET_TOT)
POCET_TOT
fdata$POCET_TOT
rm(list = ls())
jrdata <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
jrdata
str(jrdata)
pocet <- jrdata$POCET_TOT
fdata <- data.frame(jrdata$POCET_TOT, jrdata$MES_POC)
library(dplyr) # 0.4
fdata %>% filter(complete.cases(.))
str(fdata)
fdata$POCET_TOT <- as.numeric(fdata$POCET_TOT)
summary(fdata)
hist(fdata$POCET_TOT)
fdata <- data.frame(jrdata$POCET_TOT, jrdata$MES_POC)
fdata
str(fdata)
hist(fdata$POCET_TOT)
fdata$POCET_TOT <- is.integer(fdata$POCET_TOT)
is.integer(fdata$POCET_TOT)
fdata %>% filter(complete.cases(.))
str(fdata)
rm(list = ls())
jrdata <- read.csv2("data/jr_data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
jrdata
str(jrdata)
fdata <- data.frame(jrdata$POCET_TOT, jrdata$MES_POC)
library(dplyr) # 0.4
library(dplyr) # 0.4
fdata %>% filter(complete.cases(fdata))
str(fdata)
fdata$POCET_TOT <- is.integer(fdata$POCET_TOT)
summary(fdata)
hist(fdata$POCET_TOT)
hist(fdata$jrdata$POCET_TOT)
pocet <- jrdata$POCET_TOT
mes <- jrdata$MES_POC
fdata <- data.frame(mes,pocet)
library(dplyr) # 0.4
fdata %>% filter(complete.cases(.))
str(fdata)
filter(complete.cases(fdata))
fdata <- as.data.frame(mes,pocet)
fdata <- data.frame(mes,pocet)
str(fdata)
plot(fdata$mes,fdata$pocet)
hist(fdata$mes,fdata$pocet)
plot(fdata$mes,fdata$pocet)
hist(fdata$pocet)
hist(fdata$mes)
plot(fdata$mes,fdata$pocet)
pocet <- jrdata$POCET_TOT[jrdata$ZEME=="Czech Republic"]
pocet
mes <- jrdata$MES_POC[jrdata$ZEME=="Czech Republic"]
fdata <- data.frame(mes,pocet)
str(fdata)
plot(fdata$mes,fdata$pocet)
hist(fdata$mes)
plot(fdata$mes,fdata$pocet)
anova(fdata$pocet~fdata$mes)
mod1 <- lm(fdata$pocet~fdata$mes)
anova(mod1)
summary(mod1)
mes <- as.factor (jrdata$MES_POC[jrdata$ZEME=="Czech Republic"])
fdata <- data.frame(mes,pocet)
str(fdata)
plot(fdata$mes,fdata$pocet)
hist(fdata$mes)
mod1 <- lm(fdata$pocet~fdata$mes)
anova(mod1)
summary(mod1)
str(jrdata)
pocet <- jrdata$POCET_TOT[jrdata$ZEME=="Czech Republic"]
mes <- as.factor (jrdata$MES_POC[jrdata$ZEME=="Czech Republic"])
fdata <- data.frame(mes,pocet)
str(fdata)
plot(fdata$mes,fdata$pocet)
hist(fdata$mes)
mod1 <- lm(fdata$pocet~fdata$mes)
anova(mod1)
summary(mod1)
mod1 <- glm(fdata$pocet~fdata$mes, family = poisson)
anova(mod1)
summary(mod1)
mod2 <- lm(fdata$pocet~fdata$mes)
AIC(mod1,mod2)
anova(mod1)
mod2 <- glm(fdata$pocet~fdata$mes, family = gausian)
mod2 <- glm(fdata$pocet~fdata$mes, family = gaussian)
AIC(mod1,mod2)
mod3 <- glm(fdata$pocet~fdata$mes, family = binomial)
mod3 <- glm(fdata$pocet~fdata$mes, family = quasipoisson)
AIC(mod1,mod2, mod3)
mod3 <- glm(fdata$pocet~fdata$mes, family = inverse.gaussian)
AIC(mod1,mod2, mod3)
summary(mod3)
AIC(mod1,mod2, mod3)
anova(mod3)
